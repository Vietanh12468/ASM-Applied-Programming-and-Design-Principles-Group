@model User

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="border p-4 bg-white">
                @using (Html.BeginForm("Login", "Home", FormMethod.Post))
                {
                    <div class="form-group">
                        @Html.LabelFor(m => m.fullName)
                        @Html.TextBoxFor(m => m.fullName, new { placeholder = "User Name", @class = "form-control" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.email)
                        @Html.TextBoxFor(m => m.email, new { placeholder = "Email", @class = "form-control" })
                    </div>

                    <div style="color:red">
                        @ViewBag.error
                    </div>

                    <div class="form-group">
                        <input type="submit" value="Login" class="btn btn-primary mr-2" />
                        <a href="#" class="btn btn-secondary">Forgotten Email</a>
                    </div>
                }
            </div>
        </div>
        <div class="col-md-6">
            <img src="your-image-path.jpg" class="img-fluid" alt="Image">
        </div>
    </div>
</div>
@* [Fact]
            public void Login_Success_Student()
            {
                // Arrange
                var user = new User { fullName = "John Doe", email = "john@example.com" };
                var controller = GetHomeControllerInstance();

                // Act
                var result = controller.Login(user);

                // Assert
                Assert.IsType<RedirectToActionResult>(result);
                Assert.Equal("Index", (result as RedirectToActionResult).ActionName);
                Assert.Equal("Home", (result as RedirectToActionResult).ControllerName);
            }

            [Fact]
            public void Login_Success_Teacher()
            {
                // Arrange
                var user = new User { fullName = "Teacher Name", email = "teacher@example.com" };
                var controller = GetHomeControllerInstance();

                // Act
                var result = controller.Login(user);

                // Assert
                Assert.IsType<RedirectToActionResult>(result);
                Assert.Equal("Index", (result as RedirectToActionResult).ActionName);
                Assert.Equal("Home", (result as RedirectToActionResult).ControllerName);
            }

            [Fact]
            public void Login_Success_Admin()
            {
                // Arrange
                var user = new User { fullName = "Admin Name", email = "admin@example.com" };
                var controller = GetHomeControllerInstance();

                // Act
                var result = controller.Login(user);

                // Assert
                Assert.IsType<RedirectToActionResult>(result);
                Assert.Equal("Index", (result as RedirectToActionResult).ActionName);
                Assert.Equal("Home", (result as RedirectToActionResult).ControllerName);
            }

            [Fact]
            public void Login_Failure()
            {
                // Arrange
                var user = new User { fullName = "Unknown User", email = "unknown@example.com" };
                var controller = GetHomeControllerInstance();

                // Act
                var result = controller.Login(user);

                // Assert
                Assert.IsType<ViewResult>(result);
                Assert.Equal("Index", (result as ViewResult).ViewName);
                Assert.Equal("Login failed. Invalid username or password.", (result as ViewResult).ViewData["Error"]);
            }

            private HomeController GetHomeControllerInstance()
            {
                var mockController = new Mock<HomeController>();
                var mockFilePath = "students.json";
                var mockAccounts = new List<User>
            {
                new User { fullName = "John Doe", email = "john@example.com" }, // Student
                new User { fullName = "Teacher Name", email = "teacher@example.com" }, // Teacher
                new User { fullName = "Admin Name", email = "admin@example.com" } // Admin
            };

                mockController.Setup(c => c.GetAccounts(mockFilePath)).Returns(mockAccounts);

                return mockController.Object;
            }
 *@